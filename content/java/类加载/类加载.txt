1.加载
    读取构建类文件的字节流, 创建一个byte[], 存放所加载的类对应的class对象



2.链接
    类加载完之后被需被连接起来
        验证:验证类文件符合预期
            完整性检查
            检查常量池, 其他不涉及代码的静态检查也在这一步完成(如final方法是否被重写)
            方法的字节码检查
                是否所有方法都遵守访问控制关键字的限定
                方法调用的参数个数和静态类型是否正确
                确保字节码不会滥用堆栈
                确保变量在使用之前被正确初始化
                检查变量是否被赋予恰当类型的值
                简化将字节码转化为机器码的过程
        准备:类的准备阶段, 引用的其他类型都要定位到
            包括分配内存和准备好初始化类中的静态变量
        解析:解析会促使JVM检查文件中索引用的类型是否时已知类型

此时, 所有的静态变量都可以被初始化, 静态初始化代码块都会执行.
最终生成一个class对象, 用于表示加载并链接起来的新类型

--------------------------------------------------------------------------------
Class对象中由对类成员Method和field对象的引用


--------------------------------------------------------------------------------
类加载器    由ClassLoader的子类组成
    根加载器    负责加载系统的基础Jar, 不做验证工作
    扩展加载器   用于负责加载安装时自定义的标准扩展
    应用类加载器  负责加载应用类, JAVA SE的主要工作由他完成
    定制类加载器  JAVA EE或者复杂的SE框架


--------------------------------------------------------------------------------
Java反射
1.反射机制
    在运行状态中, 对于任意类, 都能直到该类的所有属性和方法
                 对于任意类, 都能调用他的任意属性和方法
    这种动态获取对象信息和动态调用对象的方法的功能--反射


--------------------------------------------------------------------------------
检查类文件
javap 默认显示public protected 和默认(包级protected)
      -p    显示private
      -v    查看常量池的信息