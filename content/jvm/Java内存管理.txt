1.  Java内存划分(hotspot)
    PC寄存器   Java虚拟机栈    java堆   方法区 运行时常量池  本地方法栈

    1)PC寄存器（线程独有）：全称是程序计数寄存器，它记载着每一个线程当前运行的JAVA方法的地址，
      如果是当前执行的是本地方法，则程序计数器会是一个空地址。它的作用就是用来支持多线程，
      线程的阻塞、恢复、挂起等一系列操作，直观的想象一下，要是没有记住每个线程当前运行的位置，又如何恢复呢。
      依据这一点，每一个线程都有一个PC寄存器，也就是说PC寄存器是线程独有的

    2)JAVA虚拟机栈（线程独有）：JAVA虚拟机栈是在创建线程的同时创建的，用于存储栈帧，JAVA虚拟机栈也是线程独有的
        栈帧：简单点说，可以解释为是一个方法运行时，临时数据的存储区域，具体点说，它里面包括了数据和部分的过程结果，
            与此同时，它又肩负着处理方法返回值、动态链接以及异常分派的任务。栈帧是随着方法的创建而创建，随着方法的结束而销毁，
            如果方法抛出异常，也算方法结束。然而在每一个栈帧中，都有着自己的局部变量表以及操作数栈以及对当前类的运行时常量池的引用。
        局部变量表：它是一个方法局部变量的列表，是在编译时期就写入了class文件当中。简单的理解，可以将它理解为一个对象数组，
            而里面按照索引0到length-1分别对应于每一个局部变量，特别的，如果是实例方法的局部变量表，
            第0个局部变量会是一个指向当前实例的引用，也就是this关键字，其余的局部变量则从索引1开始。
        操作数栈：它是一个后进先出（LIFO）栈，而它的长度也是在编译时期就写入了class文件当中，是固定的。
            它的作用就是提供字节码指令操作变量计算的空间，比如简单的，对于int a=9这句话来说，就需要先将9压入操作数栈，
            再将9赋给a这个变量。

        JAVA堆（全局共享）：这一部分是JAVA内存中最重要的一部分，之所以说是最重要的一部分，并不是因为它的重要性，而是指作为开发人员最应该关注的一部分。
            它随着JAVA虚拟机的启动创建，储存着所有对象实例以及数组对象，而且内置了“自动内存管理系统”，也就是我们常说的垃圾搜集器（GC）。
            JAVA堆中的内存释放是不受开发人员控制的，完全由JAVA虚拟机一手操办。对于JAVA虚拟机如何实现垃圾搜集器，JAVA虚拟机规范没有明确的规定
            ，也正因如此，我们平时使用的JAVA虚拟机中提供了许多种垃圾搜集器，它们采用不同的算法以及实现方式，已满足多方面的性能需求。

        方法区（全局共享）：方法区也是堆的一个组成部分，它主要存储的是运行时常量池、字段信息、方法信息、构造方法与普通函数的字节码内容以及一些特殊方法。
            它与JAVA堆的区别除了存储的信息与JAVA堆不一样之外，最大的区别就是这一部分JAVA虚拟机规范不强制要求实现自动内存管理系统（GC）。

        本地方法栈（线程独有）：本地方法栈是一个传统的栈，它用来支持native方法的执行。如果JAVA虚拟机是使用的其它语言实现指令集解释器的时候，也会用到本地方法栈。
            如果前面这两种都未发生，也就是说如果JAVA虚拟机不依赖于本地方法栈，而且JAVA虚拟机也不支持native方法，则不需要本地方法栈。而如果需要的话，
            则本地方法栈也是随每一个线程的启动而创建的。

    上面五个内存区域，除了PC寄存器之外，其余四个一般情况下，都要求JAVA虚拟机实现提供给客户调节大小的参数，也就是我们常用的Xms、Xmx等等。



2.  内存管理分为内存的分配和释放
    内存又分为全局共享（主要是堆内存）和线程独有


3.  请在使用完对象后, 显示将对象设置为null
    Object obj = new Object();
    obj = null;
    obj=null只做了一件事，就是将obj这个引用变量与new Object()创造的实例的关联断开，实际上，实例所占用的内存空间依然没有释放。
    也可以在某种程度上消除内存泄漏
4.  GC策略
    引用计数法 引用计数没有归0永远不会被回收
    跟搜索算法 消除引用计数的弊端 设置若干跟对象当任何一个跟对象到一个对象不可达时, 认为该对象可以被回收
              跟对象：虚拟机栈的引用对象（本地变量表）
                     方法区的静态属性引用的对象
                     方法区的常量引用的对象（final）
                     本地方法栈中JNI的引用对象（本地变量表）


5.  垃圾回收算法
        标记清除算法
            标记：遍历所有的GC ROOT, 将所有gc root 可达的对象标记为存活的对象
            清除：将所有没有标记的对象全部清除
            缺点：效率比较低（递归遍历全堆对象）
                 清理出的内存不连续
        复制算法 新生代使用的算法
            缺点：浪费一半的内存空间
                 复制非常耗时
        标记整理算法 与标记清除算法比较类似
            缺点：标记存活对象与地址


6.  GC分代回收
        新生代：0.8eden区    0.1×2 survivor区
               复制算法
        年老代：
                标记清除
                标记整理算法


        永久区：
                标记清除
                标记整理

7.  普通GC minor  针对新生代
    全局GC major/full 针对年老代，偶尔伴随对新生代和永久区的gc


8.  垃圾回收器
    串行回收期(serial collector):它只有一条GC线程(client模式默认采用模式)
        实现: serial适用于新生代, 采用复制算法
              serial old适用于年老代, 采用标记整理算法
    并行回收期(parallel collector）：它有多条GC线程(server模式默认采用模式)
        实现： ParNew使用新生代, 采用复制算法, 多线程
               Parallel Scavenge, 适用于新生代, 采用复制算法
               parallel old, 适用于年老代 采用标记整理算法
    并发搜集器(concurrent collector)：它有一条或多条GC线程, 需要在部分阶段暂停用户程序
            CMS 适用于年老代, 采用标记清除算法
                初始标记：stop, 快速标记存货对象
                并发标记：并发跟踪gc root
                重新标记：stop, 重新标记遗漏对象
                并发清除：清除未标记对象
            1.吞吐量比较低
            2.内存碎片
            3.并发模式失败 serial old作为备选, 进行full gc




9.  client与server模式
    client 启动快, 但不适合长时间运行
    server 启动慢, 适合长时间运行
































































